AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Testing IoT services

Parameters:

  NameParameterThing:
    Default: MyFabulousNewThing
    Type: String

  NameParameterTopic:
    Default: MyFabulousNewTopic/sensor
    Type: String

  NameTimeStreamTable:
    Default: Table1
    Type: String

  NameTimeStreamDB:
    Default: MyfirstTimestreamDB
    Type: String


Resources:

  MyThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName:
        Ref: NameParameterThing

  MyPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: PolicyIoT
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: iot:Connect
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/{NameParameterThing}'
          - Effect: Allow
            Action: iot:Subscribe
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/{NameParameterTopic}/sub'
          - Effect: Allow
            Action: iot:Receive
            Resource: !Sub  'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/{NameParameterTopic}/sub'
          - Effect: Allow
            Action: iot:Publish
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/{NameParameterTopic}/pub'

  LambdaRole: 
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ErrorLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  IotRuleRole: 
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: IotRuleRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: iot.amazonaws.com
      Policies:
        - PolicyName: WriteToTimestream
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - timestream:WriteRecords
                Resource: !Sub arn:aws:timestream:${AWS::Region}:${AWS::AccountId}:database/${NameTimeStreamDB}/table/${NameTimeStreamTable}
              - Effect: Allow
                Action:
                  - timestream:DescribeEndpoints
                Resource: "*"

  ErrorLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Send an alarm when something fail"
      FunctionName: ErrorLambda
      CodeUri: error_lambda/
      Handler: handler.handler
      Runtime: python3.8
      Role: !GetAtt LambdaRole.Arn

  MyTopicRule:
    Type: AWS::IoT::TopicRule
    Properties: 
      RuleName: SuperRuleIOT
      TopicRulePayload: 
        Actions: 
          - Timestream:
              DatabaseName: !Ref TimestreamDB
              Dimensions: 
                - Name: client
                  Value: ${client}
                - Name: car
                  Value: ${car}
                - Name: wheel
                  Value: ${wheel}                  
              RoleArn: !GetAtt IotRuleRole.Arn
              TableName: !Ref NameTimeStreamTable
        Description: 'Receive data from iot'
        ErrorAction: 
          Lambda:
            FunctionArn: !GetAtt ErrorLambda.Arn
        RuleDisabled: false
        AwsIotSqlVersion: '2016-03-23'
        Sql: !Sub SELECT pressure, temp FROM '${NameParameterTopic}/#'

  TimestreamDB:
    Type: AWS::Timestream::Database
    Properties: 
      DatabaseName: !Ref NameTimeStreamDB

  TimestreamDBTable:      
    Type: AWS::Timestream::Table
    Properties: 
      DatabaseName: !Ref TimestreamDB
      RetentionProperties: 
        MemoryStoreRetentionPeriodInHours: "24"
        MagneticStoreRetentionPeriodInDays: "7"
      TableName: !Ref NameTimeStreamTable

